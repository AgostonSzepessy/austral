module Austral.Memory is
    type Address[T: Type]: Free;
    type Pointer[T: Type]: Free;

    generic [T: Type]
    function Null_Pointer(): Address[T];

    generic [T: Type]
    function Null_Check(address: Address[T]): Option[Pointer[T]];

    generic [T: Type]
    function Allocate(size: Index): Address[T];

    generic [T: Type]
    function Load(pointer: Pointer[T]): T;

    generic [T: Type]
    function Store(pointer: Pointer[T], value: T): Unit;

    generic [T: Type]
    function Deallocate(pointer: Pointer[T]): Unit;

    generic [T: Type, R: Region]
    function Load_Read_Reference(ref: Reference[Pointer[T], R]): Reference[T, R];

    generic [T: Type, R: Region]
    function Load_Write_Reference(ref: WriteReference[Pointer[T], R]): WriteReference[T, R];

    generic [T: Type]
    function Resize_Array(array: Pointer[T], size: Index): Pointer[T];

    generic [T: Type, U: Type]
    function memmove(source: Pointer[T], destination: Pointer[U], count: Natural_64): Unit;

    generic [T: Type, U: Type]
    function memcpy(source: Pointer[T], destination: Pointer[U], count: Natural_64): Unit;

    generic [T: Type]
    function Positive_Offset(pointer: Pointer[T], offset: Natural_64): Pointer[T];

    generic [T: Type]
    function Negative_Offset(pointer: Pointer[T], offset: Natural_64): Pointer[T];
end module.