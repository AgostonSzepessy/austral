module Austral.Pervasive is
    union Option[T: Type]: Type is
        case None;
        case Some is
            value: T;
    end;

    union Either[L: Type, R: Type]: Type is
        case Left is
            left: L;
        case Right is
            right: R;
    end;

    generic [T: Free, R: Region]
    function Deref(ref: Reference[T, R]): T;

    generic [T: Free, R: Region]
    function Deref_Write(ref: WriteReference[T, R]): T;

    generic [T: Type]
    function Fixed_Array_Size(arr: Fixed_Array[T]): Index;

    function Abort(message: Fixed_Array[Natural_8]): Unit;

    type Root_Capability : Linear;

    constant Maximum_Natural_8: Natural_8;
    constant Maximum_Natural_16: Natural_16;
    constant Maximum_Natural_32: Natural_32;
    constant Maximum_Natural_64: Natural_64;

    constant Minimum_Integer_8: Integer_8;
    constant Maximum_Integer_8: Integer_8;

    constant Minimum_Integer_16: Integer_16;
    constant Maximum_Integer_16: Integer_16;

    constant Minimum_Integer_32: Integer_32;
    constant Maximum_Integer_32: Integer_32;

    constant Minimum_Integer_64: Integer_64;
    constant Maximum_Integer_64: Integer_64;

    constant Minimum_Index: Index;
    constant Maximum_Index: Index;

    typeclass Trapping_Arithmetic(T: Type) is
        method Trapping_Add(lhs: T, rhs: T): T;
        method Trapping_Subtract(lhs: T, rhs: T): T;
        method Trapping_Multiply(lhs: T, rhs: T): T;
        method Trapping_Divide(lhs: T, rhs: T): T;
    end;

    typeclass Modular_Arithmetic(T: Type) is
        method Modular_Add(lhs: T, rhs: T): T;
        method Modular_Subtract(lhs: T, rhs: T): T;
        method Modular_Multiply(lhs: T, rhs: T): T;
        method Modular_Divide(lhs: T, rhs: T): T;
    end;

    instance Trapping_Arithmetic(Natural_8);
    instance Trapping_Arithmetic(Integer_8);
    instance Trapping_Arithmetic(Natural_16);
    instance Trapping_Arithmetic(Integer_16);
    instance Trapping_Arithmetic(Natural_32);
    instance Trapping_Arithmetic(Integer_32);
    instance Trapping_Arithmetic(Natural_64);
    instance Trapping_Arithmetic(Integer_64);
    instance Trapping_Arithmetic(Double_Float);

    instance Modular_Arithmetic(Natural_8);
    instance Modular_Arithmetic(Integer_8);
    instance Modular_Arithmetic(Natural_16);
    instance Modular_Arithmetic(Integer_16);
    instance Modular_Arithmetic(Natural_32);
    instance Modular_Arithmetic(Integer_32);
    instance Modular_Arithmetic(Natural_64);
    instance Modular_Arithmetic(Integer_64);
end module.