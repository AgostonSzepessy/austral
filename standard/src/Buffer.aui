"""
This module implements the Buffer type, a linear, resizable, heap-allocated buffer.
"""
module Standard.Buffer is
    """
    The buffer type.
    """
    type Buffer[T: Type]: Linear;

    --
    -- Lifecycle functions.
    --

    """
    Create a buffer of the given size, filling all slots with copies of the given
    initial element.

    The contained type has to be Free so it can be copied any number of times.

    If allocation fails, returns `None`.
    """
    generic [T: Free]
    function initialize(size: Index, initialElement: T): Option[Buffer[T]];

    """
    Deallocate a buffer with Free elements.
    """
    generic [T: Free]
    function destroyFree(buffer: Buffer[T]): Unit;

    """
    Destroy an empty buffer.
    """
    generic [T: Type]
    function destroyEmpty(buffer: Buffer[T]): Unit;

    --
    -- Query functions.
    --

    """
    Return the number of elements in the buffer.
    """
    generic [T: Free, R: Region]
    function bufferSize(buffer: &[Buffer[T], R]): Index;

    ---
    --- Retrieval functions.
    ---

    """
    Retrieve the nth element of a Buffer of free elements.

    Abort if the index is out of bounds.
    """
    generic [T: Free, R: Region]
    function nthFree(buffer: &[Buffer[T], R], index: Index): T;

    """
    Retrieve the nth element of a Buffer of free elements.

    Returns `None` if the index is out of bounds.
    """
    generic [T: Free, R: Region]
    function nthOpt(buffer: &[Buffer[T], R], index: Index): Option[T];
end module.