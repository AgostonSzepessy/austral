import Austral.Memory (
    Heap_Array,
    Allocate_Array,
    Resize_Array,
    Deallocate_Array,
    Heap_Array_Size
);

module body Standard.Buffer is
    -- Need this to use Austral.Memory.
    pragma Unsafe_Module;

    ----------
    -- Private
    ----------

    -- The growth factor times the array's capacity tells us the next size of
    -- the array when resizing. Naively, we double the size of the array when
    -- hitting the capacity.
    constant Growth_Factor: Natural_64 := 2;

    -- Allocate an array, and abort if allocation fails.
    generic [T: Type]
    function Allocate_Or_Die(size: Natural_64): Heap_Array[T] is
        let arropt: Option[Heap_Array[T]] := Allocate_Array(size);
        case arropt of
            when Some(value: Heap_Array[T]) do
                return value;
            when None do
                Abort("Array allocation failed.");
        end case;
    end;

    -- Resize the array, aborting if allocation fails
    generic [T: Type]
    function Resize_Or_Die(array: Heap_Array[T], new_size: Natural_64): Heap_Array[T] is
        let arropt: Option[Heap_Array[T]] := Resize_Array(array, new_size);
        case arropt of
            when Some(value: Heap_Array[T]) do
                return value;
            when None do
                Abort("Array resizing failed.");
        end case;
    end;

    -- Grow a buffer by one element, reallocating if necessary.
    generic [T: Type, R: Region]
    function Increase_Size_By_One(buffer: WriteReference[Buffer[T], R]): Unit is
        let old_size: Natural_64 := Deref_Write(buffer->size);
        let old_capacity: Natural_64 := Deref_Write(buffer->capacity);
        -- If size = capacity, then we need to resize first.
        if old_size = Deref_Write(buffer->capacity) then
            let old_array: Heap_Array[T] := Deref_Write(buffer->array);
            let new_capacity: Natural_64 := old_capacity * Growth_Factor;
            let new_array: Heap_Array[T] := Resize_Or_Die(old_array, new_capacity);
            buffer->capacity := new_capacity;
            buffer->array := new_array;
        end if;
        buffer->size := old_size + 1;
        return nil;
    end;

    ---------
    -- Public
    ---------

    record Buffer[T: Type]: Linear is
        -- The capacity is the true underlying size. It is different from the
        -- size since we allocate more space than we need in order to minimize
        -- frequent reallocation.
        capacity: Natural_64;
        -- The number of elements actually stored in the array.
        size: Natural_64;
        -- The underlying heap array.
        array: Heap_Array[T];

        -- Invariants:
        --
        --   capacity >= size
    end;

    -- Lifecycle functions.

    generic [T: Type]
    function Empty_Buffer(): Buffer[T] is
        -- For simplicity, we want the buffer to always be non-empty. Also, most
        -- empty buffers won't stay empty in perpetuity. So to create an empty
        -- buffer we allocate Initial_Size.
        let initial_size: Natural_64 := 16;
        let array: Heap_Array[T] := Allocate_Or_Die(initial_size);
        let buf: Buffer[T] := Buffer(
            capacity => initial_size,
            size => 0,
            array => array
        );
        return buf;
    end;

    generic [T: Free]
    function Initialize(size: Natural_64, elem: T): Buffer[T] is
        let array: Heap_Array[T] := Allocate_Or_Die(size);
        for i from 0 to size - 1 do
            array[i] := elem;
        end for;
        let buf: Buffer[T] := Buffer(
            capacity => size,
            size => size,
            array => array
        );
        return buf;
    end;

    generic [T: Type]
    function Destroy_Buffer(buffer: Buffer[T]): Unit is
        let { capacity: Natural_64, size: Natural_64, array: Heap_Array[T] } := buffer;
        Deallocate_Array(array);
        return nil;
    end;

    -- Query

    generic [T: Free, R: Region]
    function Buffer_Size(buffer: Reference[Buffer[T], R]): Natural_64 is
        return Deref(buffer->size);
    end;

    -- Retrieval

    generic [T: Free, R: Region]
    function Nth_Free(buffer: Reference[Buffer[T], R], index: Natural_64): T is
        let arr: Heap_Array[T] := Deref(buffer->array);
        return arr[index];
    end;

    generic [T: Type, R: Region]
    function Nth_Ref(buffer: Reference[Buffer[T], R], index: Natural_64): Reference[T, R] is
        return buffer->array[index];
    end;

    -- Insertion

    -- generic [T: Type, R: Region]
    -- function Insert(buffer: WriteReference[Buffer[T], R], index: Natural_64, elem: T): Unit is
    --     let old_size: Natural_64 := Deref_Write(buffer->size);
    --     -- The insertion index is the position the element will have when the
    --     -- buffer is modified. It is a natural number in the closed interval [0, size].
    --     --
    --     -- If index = 0, the element will be placed at the zeroth position. If
    --     -- index = size, the element will be placed in the last position.
    --     if index > old_size then
    --         Abort("Insertion index out of bounds.");
    --     end if;
    --     -- Increase the size by one, reallocating if necessary.
    --     Increase_Size_By_One(buffer);
    --     -- Cases:
    --     --
    --     --   1. If the array had a size of zero, just insert the element at the
    --     --      zeroth position.
    --     --   2. If the array has a size >= 1, then count backwards from the
    --     --      size, moving each element over, until you get to the index.
    --     if old_size = 0 then
    --         buffer->array[0] := elem;
    --     else
    --         let idx: Natural_64 := old_size + 1;
    --         while idx /= index do
    --             let arr: Heap_Array[T] := Deref_Write(buffer->array);
    --             let elem_to_move: T := arr[idx - 1];
    --             buffer[idx] := elem_to_move;
    --         end while;

    --     end if;
    --     return nil;
    -- end;
end module body.
