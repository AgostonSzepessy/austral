import Standard.Buffer (
    Buffer,
    initialize,
    destroyFree,
    bufferSize,
    nthFree
);
import Standard.Test.Unit (
    assertTrue,
    assertSuccess,
    assertFailure,
    suiteHeading,
    testHeading
);

module body Standard.Test.Buffer is
    function bufferTestSuite(): Unit is
        suiteHeading("Standard.Buffer");
        basicLifecycleTest();
        nthFreeTest();
        return nil;
    end;

    function basicLifecycleTest(): Unit is
        testHeading("Basic lifecycle: initialize and destroyFree and unbox");
        let opt: Option[Buffer[Int32]] := initialize(size => 10, initialElement => 10);
        case opt of
            when Some(value as buffer: Buffer[Int32]) do
                 destroyFree(buffer);
                 assertSuccess("destroyFree succeeded");
            when None do
                 assertFailure("initialize failed.");
        end case;
        return nil;
    end;

    function nthFreeTest(): Unit is
        testHeading("nthFree");
        let opt: Option[Buffer[Int32]] := initialize(size => 10, initialElement => 10);
        case opt of
            when Some(value as buffer: Buffer[Int32]) do
                 let first: Int32 := nthFree(&buffer, 0);
                 assertTrue((first = 10), "`first` equals 10");
                 let last: Int32 := nthFree(&buffer, 9);
                 assertTrue((last = 10), "`last` equals 10");
                 destroyFree(buffer);
                 assertSuccess("destroyFree succeeded");
            when None do
                 assertFailure("initialize failed.");
        end case;
        return nil;
    end;
end module body.