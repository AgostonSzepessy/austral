import Austral.Memory (
    Pointer,
    Null_Pointer,
    Allocate,
    Deallocate
);

module body Example.Array is
    pragma Unsafe_Module;

    function Put_Character(character: Natural_8): Integer_32 is
        pragma Foreign_Import(External_Name => "putchar");
    end;

    function Show_Bool(b: Boolean): Unit is
        if b then
            Put_Character(84);
        else
            Put_Character(70);
        end if;
        return nil;
    end;

    function Main(root: Root_Capability): Root_Capability is
        let arr: Pointer[Boolean] := Allocate(3);
        let null: Pointer[Boolean] := Null_Pointer();
        if arr = null then
            skip;
        else
            arr[0] := true;
            arr[2] := true;
            let first: Boolean := arr[0];
            let second: Boolean := arr[1];
            let third: Boolean := arr[2];
            Show_Bool(first);
            Show_Bool(second);
            Show_Bool(third);
            Deallocate(arr);
        end if;
        return root;
    end;
end module body.
