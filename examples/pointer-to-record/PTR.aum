import Austral.Memory (
    Pointer,
    Allocate,
    Load,
    Store,
    Deallocate
);

module body Example.PTR is
    pragma Unsafe_Module;

    record R: Free is
        X: Integer_32;
    end;

    function Put_Character(character: Integer_32): Integer_32 is
        pragma Foreign_Import(External_Name => "putchar");
    end;

    function Main(root: Root_Capability): Root_Capability is
        let r: R := R(X => 97);
        let optptr: Option[Pointer[R]] := Allocate(r);
        case optptr of
            when Some(value: Pointer[R]) do
                Put_Character(value->X);
                Deallocate(value);
            when None do
              -- Do nothing.
              skip;
        end case;
        return root;
    end;
end module body.
