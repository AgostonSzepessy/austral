import Austral.Memory (
    Address,
    Null_Pointer,
    Allocate,
    Load,
    Store,
    Deallocate
);

module body Example.PTR is
    pragma Unsafe_Module;

    record R: Free is
        X: Integer_32;
    end;

    function Put_Character(character: Integer_32): Integer_32 is
        pragma Foreign_Import(External_Name => "putchar");
    end;

    function Main(root: Root_Capability): Root_Capability is
        let r: R := R(X => 97);
        let ptr: Address[R] := Allocate(sizeof(R));
        let null: Address[R] := Null_Pointer();
        if ptr = null then
            -- Do nothing.
            skip;
        else
            Store(ptr, r);
            Put_Character(ptr->X);
            Deallocate(ptr);
        end if;
        return root;
    end;
end module body.
