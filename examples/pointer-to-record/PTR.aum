import Austral.Memory (
    Address,
    Pointer,
    Null_Check,
    Allocate,
    Load,
    Store,
    Deallocate
);

module body Example.PTR is
    pragma Unsafe_Module;

    record R: Free is
        X: Int32;
    end;

    function Put_Character(character: Int32): Int32 is
        pragma Foreign_Import(External_Name => "putchar");
    end;

    function main(): ExitCode is
        let r: R := R(X => 97);
        let addr: Address[R] := Allocate(sizeof(R));
        case Null_Check(addr) of
            when Some(value: Pointer[R]) do
                Store(value, r);
                Put_Character(value->X);
                Deallocate(value);
            when None do
                -- Do nothing.
                skip;
        end case;
        return ExitSuccess();
    end;
end module body.
