import Austral.Memory (
    Pointer,
    Allocate,
    Load,
    Store,
    Deallocate
);

module body Example.Box is
    record Box[T: Type]: Linear is
        pointer: Pointer[T];
    end;

    generic [T: Type]
    function Make(value: T): Box[T] is
        let ptr: Pointer[T] := Allocate(value);
        let box: Box[T] := Box(pointer => ptr);
        return box;
    end;

    generic [T: Type]
    function Unbox(box: Box[T]): T is
        let ptr: Pointer[T] := box.pointer;
        let value: T := Load(ptr);
        Deallocate(ptr);
        return value;
    end;

    generic [T: Type]
    function Swap(box: Box[T], value: T): T is
        let old: T := Load(box.pointer);
        Store(box.pointer, value);
        return old;
    end;

    function Main(): Unit is
        return nil;
    end;
end module body.
