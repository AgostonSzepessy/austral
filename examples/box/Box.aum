import Austral.Memory (
    Pointer,
    Allocate,
    Load,
    Store,
    Deallocate
);

module body Example.Box is
    record Box[T: Type]: Linear is
        pointer: Pointer[T];
    end;

    generic [T: Type]
    function Make(val: T): Box[T] is
        let ptr: Option[Pointer[T]] := Allocate(val);
        case ptr of
            when Some(value: Pointer[T]) do
                let box: Box[T] := Box(pointer => value);
                return box;
            when None do
                -- Abort here.
                skip;
        end case;
    end;

    generic [T: Type]
    function Make2(val: T): Option[Box[T]] is
        let ptr: Option[Pointer[T]] := Allocate(val);
        case ptr of
            when Some(value: Pointer[T]) do
                --let box: Box[T] := Box(pointer => value);
                --let boxopt: Option[Box[T]] := Some(value => box);
                --return boxopt;
                skip;
            when None do
                let boxopt: Option[Box[T]] := None();
                return boxopt;
        end case;
    end;

    --generic [T: Type]
    --function Unbox(box: Box[T]): T is
    --    let ptr: Pointer[T] := box.pointer;
    --    let value: T := Load(ptr);
    --    Deallocate(ptr);
    --    return value;
    --end;

    --generic [T: Type]
    --function Swap(box: Box[T], new: T): T is
    --    let ptr: Pointer[T] := box.pointer;
    --    let old: T := Load(ptr);
    --    Store(ptr, new);
    --    return old;
    --end;

    function Put_Character(character: Integer_32): Integer_32 is
        pragma Foreign_Import(External_Name => "putchar");
    end;

    function Main(): Unit is
        --let b: Box[Integer_32] := Make(123);
        --Swap(b, 97);
        --let value: Integer_32 := Unbox(b);
        --Put_Character(value);
        return nil;
    end;
end module body.
