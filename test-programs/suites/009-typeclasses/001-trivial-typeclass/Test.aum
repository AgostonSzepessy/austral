module body Test is
    pragma Unsafe_Module;

    function Put_String(str: Fixed_Array[Natural_8]): Integer_32 is
        pragma Foreign_Import(External_Name => "puts");
    end;

    typeclass PrintFree(T: Free) is
        method Print(x: T): Unit;
    end;

    instance PrintFree(Natural_8) is
        method Print(x: Natural_8): Unit is
            Put_String("Nat8");
            return nil;
        end;
    end;

    instance PrintFree(Natural_16) is
        method Print(x: Natural_16): Unit is
            Put_String("Nat16");
            return nil;
        end;
    end;

    instance PrintFree(Double_Float) is
        method Print(x: Double_Float): Unit is
            Put_String("Float64");
            return nil;
        end;
    end;

    generic [T: Type, R: Region]
    instance PrintFree(&[T, R]) is
        method Print(x: &[T, R]): Unit is
            Put_String("REF");
            return nil;
        end;
    end;

    record Foo: Linear is
    end;

    function Main(root: Root_Capability): Root_Capability is
        let n8: Natural_8 := 'a';
        Print(n8);
        Print('a' : Natural_16);
        Print(3.14);
        let foo: Foo := Foo();
        borrow foo as fooref in rho do
            Print(fooref);
        end;
        Print(&foo);
        let {} := foo;
        return root;
    end;
end module body.
